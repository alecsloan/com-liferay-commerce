/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.product.model.CommerceChannel;
import com.liferay.commerce.product.model.CommerceChannelModel;
import com.liferay.commerce.product.model.CommerceChannelSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the CommerceChannel service. Represents a row in the &quot;CommerceChannel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceChannelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceChannelImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CommerceChannelImpl
 * @see CommerceChannel
 * @see CommerceChannelModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceChannelModelImpl extends BaseModelImpl<CommerceChannel>
	implements CommerceChannelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce channel model instance should use the {@link CommerceChannel} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceChannel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commerceChannelId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "commerceCatalogId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "consumerType", Types.VARCHAR },
			{ "consumerTypeSettings", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("commerceChannelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commerceCatalogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("consumerType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerTypeSettings", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceChannel (commerceChannelId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,commerceCatalogId LONG,name STRING null,active_ BOOLEAN,consumerType VARCHAR(75) null,consumerTypeSettings VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceChannel";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceChannel.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceChannel.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.product.model.CommerceChannel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.product.model.CommerceChannel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.product.model.CommerceChannel"),
			true);
	public static final long COMMERCECATALOGID_COLUMN_BITMASK = 1L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceChannel toModel(CommerceChannelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceChannel model = new CommerceChannelImpl();

		model.setCommerceChannelId(soapModel.getCommerceChannelId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommerceCatalogId(soapModel.getCommerceCatalogId());
		model.setName(soapModel.getName());
		model.setActive(soapModel.isActive());
		model.setConsumerType(soapModel.getConsumerType());
		model.setConsumerTypeSettings(soapModel.getConsumerTypeSettings());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceChannel> toModels(
		CommerceChannelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceChannel> models = new ArrayList<CommerceChannel>(soapModels.length);

		for (CommerceChannelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.product.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.product.model.CommerceChannel"));

	public CommerceChannelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceChannelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceChannelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceChannelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceChannel.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceChannel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commerceChannelId", getCommerceChannelId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commerceCatalogId", getCommerceCatalogId());
		attributes.put("name", getName());
		attributes.put("active", isActive());
		attributes.put("consumerType", getConsumerType());
		attributes.put("consumerTypeSettings", getConsumerTypeSettings());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commerceChannelId = (Long)attributes.get("commerceChannelId");

		if (commerceChannelId != null) {
			setCommerceChannelId(commerceChannelId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commerceCatalogId = (Long)attributes.get("commerceCatalogId");

		if (commerceCatalogId != null) {
			setCommerceCatalogId(commerceCatalogId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		String consumerType = (String)attributes.get("consumerType");

		if (consumerType != null) {
			setConsumerType(consumerType);
		}

		String consumerTypeSettings = (String)attributes.get(
				"consumerTypeSettings");

		if (consumerTypeSettings != null) {
			setConsumerTypeSettings(consumerTypeSettings);
		}
	}

	@JSON
	@Override
	public long getCommerceChannelId() {
		return _commerceChannelId;
	}

	@Override
	public void setCommerceChannelId(long commerceChannelId) {
		_commerceChannelId = commerceChannelId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCommerceCatalogId() {
		return _commerceCatalogId;
	}

	@Override
	public void setCommerceCatalogId(long commerceCatalogId) {
		_columnBitmask |= COMMERCECATALOGID_COLUMN_BITMASK;

		if (!_setOriginalCommerceCatalogId) {
			_setOriginalCommerceCatalogId = true;

			_originalCommerceCatalogId = _commerceCatalogId;
		}

		_commerceCatalogId = commerceCatalogId;
	}

	public long getOriginalCommerceCatalogId() {
		return _originalCommerceCatalogId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public String getConsumerType() {
		if (_consumerType == null) {
			return "";
		}
		else {
			return _consumerType;
		}
	}

	@Override
	public void setConsumerType(String consumerType) {
		_consumerType = consumerType;
	}

	@JSON
	@Override
	public String getConsumerTypeSettings() {
		if (_consumerTypeSettings == null) {
			return "";
		}
		else {
			return _consumerTypeSettings;
		}
	}

	@Override
	public void setConsumerTypeSettings(String consumerTypeSettings) {
		_consumerTypeSettings = consumerTypeSettings;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceChannel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(CommerceChannel.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CommerceChannel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceChannel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceChannelImpl commerceChannelImpl = new CommerceChannelImpl();

		commerceChannelImpl.setCommerceChannelId(getCommerceChannelId());
		commerceChannelImpl.setCompanyId(getCompanyId());
		commerceChannelImpl.setUserId(getUserId());
		commerceChannelImpl.setUserName(getUserName());
		commerceChannelImpl.setCreateDate(getCreateDate());
		commerceChannelImpl.setModifiedDate(getModifiedDate());
		commerceChannelImpl.setCommerceCatalogId(getCommerceCatalogId());
		commerceChannelImpl.setName(getName());
		commerceChannelImpl.setActive(isActive());
		commerceChannelImpl.setConsumerType(getConsumerType());
		commerceChannelImpl.setConsumerTypeSettings(getConsumerTypeSettings());

		commerceChannelImpl.resetOriginalValues();

		return commerceChannelImpl;
	}

	@Override
	public int compareTo(CommerceChannel commerceChannel) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				commerceChannel.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceChannel)) {
			return false;
		}

		CommerceChannel commerceChannel = (CommerceChannel)obj;

		long primaryKey = commerceChannel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceChannelModelImpl commerceChannelModelImpl = this;

		commerceChannelModelImpl._setModifiedDate = false;

		commerceChannelModelImpl._originalCommerceCatalogId = commerceChannelModelImpl._commerceCatalogId;

		commerceChannelModelImpl._setOriginalCommerceCatalogId = false;

		commerceChannelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceChannel> toCacheModel() {
		CommerceChannelCacheModel commerceChannelCacheModel = new CommerceChannelCacheModel();

		commerceChannelCacheModel.commerceChannelId = getCommerceChannelId();

		commerceChannelCacheModel.companyId = getCompanyId();

		commerceChannelCacheModel.userId = getUserId();

		commerceChannelCacheModel.userName = getUserName();

		String userName = commerceChannelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceChannelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceChannelCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceChannelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceChannelCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceChannelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceChannelCacheModel.commerceCatalogId = getCommerceCatalogId();

		commerceChannelCacheModel.name = getName();

		String name = commerceChannelCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			commerceChannelCacheModel.name = null;
		}

		commerceChannelCacheModel.active = isActive();

		commerceChannelCacheModel.consumerType = getConsumerType();

		String consumerType = commerceChannelCacheModel.consumerType;

		if ((consumerType != null) && (consumerType.length() == 0)) {
			commerceChannelCacheModel.consumerType = null;
		}

		commerceChannelCacheModel.consumerTypeSettings = getConsumerTypeSettings();

		String consumerTypeSettings = commerceChannelCacheModel.consumerTypeSettings;

		if ((consumerTypeSettings != null) &&
				(consumerTypeSettings.length() == 0)) {
			commerceChannelCacheModel.consumerTypeSettings = null;
		}

		return commerceChannelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{commerceChannelId=");
		sb.append(getCommerceChannelId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commerceCatalogId=");
		sb.append(getCommerceCatalogId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", active=");
		sb.append(isActive());
		sb.append(", consumerType=");
		sb.append(getConsumerType());
		sb.append(", consumerTypeSettings=");
		sb.append(getConsumerTypeSettings());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.commerce.product.model.CommerceChannel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commerceChannelId</column-name><column-value><![CDATA[");
		sb.append(getCommerceChannelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceCatalogId</column-name><column-value><![CDATA[");
		sb.append(getCommerceCatalogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(isActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerType</column-name><column-value><![CDATA[");
		sb.append(getConsumerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerTypeSettings</column-name><column-value><![CDATA[");
		sb.append(getConsumerTypeSettings());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceChannel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceChannel.class, ModelWrapper.class
		};
	private long _commerceChannelId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _commerceCatalogId;
	private long _originalCommerceCatalogId;
	private boolean _setOriginalCommerceCatalogId;
	private String _name;
	private String _nameCurrentLanguageId;
	private boolean _active;
	private String _consumerType;
	private String _consumerTypeSettings;
	private long _columnBitmask;
	private CommerceChannel _escapedModel;
}